Kinetic.Node.prototype.closest=function(e){for(var t=this.parent;void 0!==t;){if(t.nodeType===e)return t;t=t.parent}return!1},Kinetic.Stage.prototype.createCopy=function(){var e,t=[],a=this.getChildren();for(e=0;e<a.length;e++)t.push(a[e].clone());return t},Kinetic.Stage.prototype.getScaledWidth=function(){return Math.ceil(this.getWidth()/this.getScale().x)},Kinetic.Stage.prototype.getScaledHeight=function(){return Math.ceil(this.getHeight()/this.getScale().y)},Kinetic.Stage.prototype.getSaveWidth=function(){return this.im.saveWidth},Kinetic.Stage.prototype.getSaveHeight=function(){return this.im.saveHeight},Kinetic.Stage.prototype.getTotalDimensions=function(){var e=(this.getSaveHeight()/2-this.im.center.y)*this.getScale().y,t=e+this.getHeight()-this.getSaveHeight()*this.getScale().y,a=(this.getSaveWidth()/2-this.im.center.x)*this.getScale().x;return{min:{x:a,y:e},max:{x:a+this.getWidth()-this.getSaveWidth()*this.getScale().x,y:t},width:this.getScaledWidth(),height:this.getScaledHeight(),visibleWidth:Math.max(this.getSaveWidth(),2*this.getScaledWidth()-this.getSaveWidth()),visibleHeight:Math.max(this.getSaveHeight(),2*this.getScaledHeight()-this.getSaveHeight())}},Kinetic.Stage.prototype.loadCopy=function(e){var t;for(this.removeChildren(),t=0;t<e.length;t++)this.add(e[t]);this.draw()},Kinetic.Stage.prototype.elementType="stage",Kinetic.Image.prototype.getImageData=function(){var e=new Kinetic.Canvas(this.attrs.image.width,this.attrs.image.height),t=e.getContext();t.drawImage(this.attrs.image,0,0);try{return t.getImageData(0,0,e.getWidth(),e.getHeight())}catch(e){Kinetic.Util.warn("Unable to get imageData.")}},Kinetic.Layer.prototype._cacheddraw=(new Kinetic.Layer).draw,Kinetic.Layer.prototype.draw=function(){return"undefined"==typeof im||im.trigger,this._cacheddraw()},Kinetic.Layer.prototype.elementType="layer",Kinetic.Group.prototype.elementType="group",Kinetic.Text.prototype.rasterize=function(e){var t=this.parent,a=this;this.toImage({callback:function(i){var n=new Kinetic.Image({image:i,x:a.getPosition().x,y:a.getPosition().y});a.remove(),t.add(n).draw(),e.callback(n)}})},function(){var e,t;try{e=Object.getPrototypeOf(document.createElement("canvas").getContext("2d")),t=e.drawImage}catch(e){t=null}t&&(e.drawImage=function(){return arguments.length>=4&&(this.imageSmoothingEnabled=!0,"string"==typeof this.imageSmoothingQuality&&(this.imageSmoothingQuality="high")),t.apply(this,arguments)})}();var control_sets=[],components=[],filters=[],ImageEditor=function(e){"use strict";if(void 0===e)return this;e.pixelRatio=1;var t=this,a=function(e){return Math.round(e)};t.saveData=e.saveData||{},t.saveUrl=e.saveUrl,t.token=e.token,t.width=e.width,t.height=e.height,t.strictSize=void 0!==e.strictSize?!!e.strictSize:e.saveWidth>0,t.saveWidth=e.saveWidth||(t.strictSize?0:a(t.width/2)),t.saveHeight=e.saveHeight||(t.strictSize?0:a(t.height/2)),t.stage=new Kinetic.Stage(e),t.namespaces={},t.controlSets={},t.components={},t.settings=e,t.filters={},t.fileId=t.settings.fID,t.scale=1,t.crosshair=new Image,t.uniqid=t.stage.getContainer().id,t.editorContext=$(t.stage.getContainer()).parent(),t.domContext=t.editorContext.parent(),t.controlContext=t.domContext.children("div.controls"),t.controlSetNamespaces=[],t.showLoader=$.fn.dialog.showLoader,t.hideLoader=$.fn.dialog.hideLoader,t.stage.im=t,t.stage.elementType="stage",t.crosshair.src=CCM_IMAGE_PATH+"/image_editor/crosshair.png",t.center={x:Math.round(t.width/2),y:Math.round(t.height/2)},t.centerOffset={x:t.center.x,y:t.center.y};var i=function(e){return $(e,t.domContext)},n=function(){if(!0===e.debug&&"undefined"!=typeof console){var t=arguments;1==t.length&&(t=t[0]),console.log(t)}},o=function(){if(!0===e.debug&&"undefined"!=typeof console){var t=arguments;1==t.length&&(t=t[0]),console.warn(t)}},s=function(){if("undefined"!=typeof console){var e=arguments;1==e.length&&(e=e[0]),console.error("Image Editor Error: "+e)}};t.stage._setDraggable=t.stage.setDraggable,t.stage.setDraggable=function(e){return o("setting draggable to "+e),t.stage._setDraggable(e)},t.bindEvent=t.bind=t.on=function(e,a,i){var n=i||t.stage.getContainer();n instanceof jQuery&&(n=n[0]),ConcreteEvent.sub(e,a,n)},t.fireEvent=t.fire=t.trigger=function(e,a,i){var n=i||t.stage.getContainer();n instanceof jQuery&&(n=n[0]),ConcreteEvent.pub(e,a,n)},t.addElement=function(e,a){var i=new Kinetic.Layer;e.elementType=a,i.elementType=a,i.add(e),t.stage.add(i),i.moveDown(),t.stage.draw()},t.on("backgroundBuilt",function(){void 0!==t.activeElement&&void 0!==t.activeElement.doppelganger&&(t.foreground.add(t.activeElement.doppelganger),t.activeElement.doppelganger.setPosition(t.activeElement.getPosition()))}),t.setActiveElement=function(e){if(e.defer)return t.setActiveElement(e.defer);t.activeElement!=e&&(void 0!==t.activeElement&&void 0!==t.activeElement.doppelganger&&t.activeElement.doppelganger.remove(),e===t.stage||"Stage"==e.nodeType?(t.trigger("ChangeActiveAction",t.controlSetNamespaces.length?t.controlSetNamespaces[0]:void 0),$("div.control-sets",t.controlContext).find("h4.active").removeClass("active")):void 0!==e.doppelganger&&(t.foreground.add(e.doppelganger),t.foreground.draw()),t.trigger("beforeChangeActiveElement",t.activeElement),t.alterCore("activeElement",e),t.trigger("changeActiveElement",e),t.stage.draw())},t.bind("ClickedElement",function(e,a){t.setActiveElement(a)}),t.bind("stageChanged",function(e){(t.activeElement.getWidth()>t.stage.getScaledWidth()||t.activeElement.getHeight()>t.stage.getScaledHeight())&&t.setActiveElement(t.stage)});var r=i(t.stage.getContainer()).parent().children(".bottomBar");r.attr("unselectable","on");var c={};c.zoomIn=i("<div class='bottombarbutton plus'><i class='fa fa-plus'></i></div>"),c.zoomOut=i("<div class='bottombarbutton'><i class='fa fa-minus'></i></div>"),c.zoomIn.appendTo(r),c.zoomOut.appendTo(r),c.zoomIn.click(function(e){t.fire("zoomInClick",e)}),c.zoomOut.click(function(e){t.fire("zoomOutClick",e)});var d=i("<div></div>").addClass("scale").text("100%");t.on("scaleChange",function(e){d.text(Math.round(1e4*t.scale)/100+"%")}),d.click(function(){t.scale=1,t.stage.setScale(t.scale);var e=t.stage.getDragBoundFunc()({x:t.stage.getX(),y:t.stage.getY()});t.stage.setX(e.x),t.stage.setY(e.y),t.fire("scaleChange"),t.buildBackground(),t.stage.draw()}),d.appendTo(r);t.on("zoomInClick",function(e){var a=(-t.stage.getX()+t.stage.getWidth()/2)/t.scale,i=(-t.stage.getY()+t.stage.getHeight()/2)/t.scale;t.scale/=5/6,t.scale=Math.round(1e3*t.scale)/1e3,t.alterCore("scale",t.scale);var n=(-t.stage.getX()+t.stage.getWidth()/2)/t.scale,o=(-t.stage.getY()+t.stage.getHeight()/2)/t.scale;t.stage.setX(t.stage.getX()-(a-n)*t.scale),t.stage.setY(t.stage.getY()-(i-o)*t.scale),t.stage.setScale(t.scale);var s=t.stage.getDragBoundFunc()({x:t.stage.getX(),y:t.stage.getY()});t.stage.setX(s.x),t.stage.setY(s.y),t.fire("scaleChange"),t.buildBackground(),t.stage.draw()}),t.on("zoomOutClick",function(e){var a=(-t.stage.getX()+t.stage.getWidth()/2)/t.scale,i=(-t.stage.getY()+t.stage.getHeight()/2)/t.scale;t.scale*=5/6,t.scale=Math.round(1e3*t.scale)/1e3,t.alterCore("scale",t.scale);var n=(-t.stage.getX()+t.stage.getWidth()/2)/t.scale,o=(-t.stage.getY()+t.stage.getHeight()/2)/t.scale;t.stage.setX(t.stage.getX()-(a-n)*t.scale),t.stage.setY(t.stage.getY()-(i-o)*t.scale),t.stage.setScale(t.scale);var s=t.stage.getDragBoundFunc()({x:t.stage.getX(),y:t.stage.getY()});t.stage.setX(s.x),t.stage.setY(s.y),t.fire("scaleChange"),t.buildBackground(),t.stage.draw()});var g={};if(g.width=i("<span/>").addClass("saveWidth"),g.height=i("<span/>").addClass("saveHeight"),g.crop=i('<div><i class="icon-resize-full"/></div>').addClass("bottombarbutton").addClass("crop"),g.both=g.height.add(g.width).width(32).attr("contenteditable",!0),g.area=i("<span/>").css({float:"right"}),t.on("adjustedsavers",function(){g.width.text(t.saveWidth),g.height.text(t.saveHeight)}),g.crop.click(function(){t.adjustSavers()}),t.strictSize?g.both.attr("disabled","true"):g.both.keyup(function(e){t.fire("editedSize",e)}),t.bind("editedSize",function(e){t.saveWidth=parseInt(g.width.text()),t.saveHeight=parseInt(g.height.text()),isNaN(t.saveWidth)&&(t.saveWidth=0),isNaN(t.saveHeight)&&(t.saveHeight=0),t.buildBackground()}),t.bind("saveSizeChange",function(){g.width.text(t.saveWidth),g.height.text(t.saveHeight)}),t.setCursor=function(e){$(t.stage.getContainer()).css("cursor",e)},t.save=function(){t.fire("ChangeActiveAction"),t.fire("ImageEditorWillSave"),$.fn.dialog.showLoader(),t.stage.toDataURL({callback:function(a){var i=$("<img />").addClass("fake_canvas").appendTo(t.editorContext.children(".Editor"));i.attr("src",a),i.css({position:"absolute",top:0,left:0,backgroundColor:"white"});var n=t.stage.getPosition(),o=t.scale,s=t.stage.getWidth(),r=t.stage.getHeight();t.stage.setPosition(-t.saveArea.getX(),-t.saveArea.getY()),t.stage.setScale(1),t.background.hide(),t.foreground.hide(),t.stage.setHeight(t.saveHeight+100),t.stage.setWidth(t.saveWidth+100),t.stage.draw();var c=e.mime;"image/jpeg"!==c&&"image/png"!==c&&(c="image/png"),t.stage.toDataURL({mimeType:c,quality:e.jpegCompression,width:t.saveWidth,height:t.saveHeight,callback:function(e){t.stage.setPosition(n),t.background.show(),t.foreground.show(),t.stage.setScale(o),t.stage.setHeight(r),t.stage.setWidth(s),t.stage.draw(),i.remove(),$.post(t.saveUrl,_.extend(t.saveData,{fID:t.fileId,imgData:e,ccm_token:t.token}),function(a){$.fn.dialog.hideLoader();var i=JSON.parse(a);1===i.error?(alert(i.message),$("button.save[disabled]").attr("disabled",!1)):0===i.error&&(t.fire("ImageEditorDidSave",_.extend(t.saveData,{fID:t.fileId,imgData:e})),Concrete.event.fire("ImageEditorDidSave",_.extend(t.saveData,{fID:t.fileId,imgData:e})))})}})}})},t.actualPosition=function(e,a,i,n,o){var s=a-n,r=e-i,c=t.activeElement.getRotation()+Math.atan2(s,r),d=Math.sqrt(Math.pow(r,2)+Math.pow(s,2));return[i+d*Math.cos(c),n+d*Math.sin(c)]},t.getActualRect=function(e,a,i){var n=[],o=i.getRotation();return n.push(t.actualPosition(i.getX(),i.getY(),e,a,o)),n.push(t.actualPosition(i.getX()+i.getWidth()*i.getScaleX(),i.getY(),e,a,o)),n.push(t.actualPosition(i.getX()+i.getWidth()*i.getScaleX(),i.getY()+i.getHeight()*i.getScaleY(),e,a,o)),n.push(t.actualPosition(i.getX(),i.getY()+i.getHeight()*i.getScaleY(),e,a,o)),n},t.adjustSavers=function(e){if("Stage"!==t.activeElement.nodeType){t.foreground.autoCrop=!1,t.background.autoCrop=!1;var a,a,i,n={min:{x:!1,y:!1},max:{x:!1,y:!1}},o=t.activeElement,s=o.parent,r=t.getActualRect(0,0,o);for(a=r.length-1;a>=0;a--){var c=r[a],d=c[0]+s.getX(),g=c[1]+s.getY();(d>n.max.x||!1===n.max.x)&&(n.max.x=d),(d<n.min.x||!1===n.min.x)&&(n.min.x=d),(g>n.max.y||!1===n.max.y)&&(n.max.y=g),(g<n.min.y||!1===n.min.y)&&(n.min.y=g)}i={width:n.max.x-n.min.x,height:n.max.y-n.min.y},t.strictSize||(t.alterCore("saveWidth",Math.round(i.width)),t.alterCore("saveHeight",Math.round(i.height)),t.buildBackground());var l=[t.center.x-t.activeElement.getWidth()*t.activeElement.getScaleX()/2,t.center.y-t.activeElement.getHeight()*t.activeElement.getScaleY()/2],h=t.actualPosition(l[0],l[1],t.center.x,t.center.y,t.activeElement.getRotation());t.activeElement.parent.setPosition(h.map(Math.round)),!1!==e&&t.fire("adjustedsavers"),t.stage.draw()}},t.bind("imageLoad",function(){setTimeout(t.adjustSavers,0)}),t.extend=function(e,t){this[e]=t},t.alterCore=function(e,a){var i,n=t;if(t.namespace){n.namespace;n=t.realIm}t[e]=a;for(i in t.controlSets)t.controlSets[i].im.extend(e,a);for(i in t.filters)t.filters[i].im.extend(e,a);for(i in t.components)t.components[i].im.extend(e,a)},t.clone=function(e){var a,i=new ImageEditor;i.realIm=t;for(a in t)i[a]=t[a];return i.namespace=e,i},t.addControlSet=function(e,a,i){jQuery&&i instanceof jQuery&&(i=i[0]),i.controlSet=function(t,a){t.disable=function(){t.enabled=!1,$(i).parent().parent().addClass("disabled")},t.enable=function(){t.enabled=!0,$(i).parent().parent().removeClass("disabled")},this.im=t,this.$=$,o("Loading ControlSet",t);try{new Function("im","$",a).call(this,t,$)}catch(i){console.log(i.stack);var n=i.stack.replace(/[\S\s]+at HTMLDivElement.eval.+?<anonymous>:(\d+:\d+)[\S\s]+/,"$1").split(":");if(n[1]&&!isNaN(parseInt(n[1]))){var r=a.split("\n"),c="Parse error at line #"+n[0]+" char #"+n[1]+" within "+e;c+="\n"+r[parseInt(n[0])-1],c+="\n"+new Array(parseInt(n[1])).join(" ")+"^",s(c)}else s('"'+i.message+'" in "'+t.namespace+'"')}return this};var n=t.clone(e),r=i.controlSet.call(i,n,a);return t.controlSets[e]=r,r},t.addFilter=function(e,a){var i=function(t,a){this.namespace=t.namespace,this.im=t;try{new Function("im","$",a).call(this,t,$)}catch(t){s(t),window.lastError=t;var i=t.stack.replace(/[\S\s]+at HTMLDivElement.eval.+?<anonymous>:(\d+:\d+)[\S\s]+/,"$1").split(":");if(2!=i.length)s(t.message),s(t.stack);else{var n=a.split("\n"),o="Parse error at line #"+i[0]+" char #"+i[1]+" within "+e;o+="\n"+n[parseInt(i[0])-1],o+="\n"+new Array(parseInt(i[1])||0).join(" ")+"^",s(o)}}return this},n=t.clone(e),o=new i(n,a);return t.filters[e]=o,o},t.addComponent=function(e,a,i){jQuery&&i instanceof jQuery&&(i=i[0]),i.component=function(t,a){t.disable=function(){$(this).parent().parent().addClass("disabled")},t.enable=function(){$(this).parent().parent().removeClass("disabled")},this.im=t,o("Loading component",t);try{new Function("im","$",a).call(this,t,$)}catch(o){var i=o.stack.replace(/[\S\s]+at HTMLDivElement.eval.+?<anonymous>:(\d+:\d+)[\S\s]+/,"$1").split(":");if(i[1]&&!isNaN(parseInt(i[1]))){var n=a.split("\n"),r="Parse error at line #"+i[0]+" char #"+i[1]+" within "+e;r+="\n"+n[parseInt(i[0])-1],r+="\n"+new Array(parseInt(i[1])).join(" ")+"^",s(r)}else s('"'+o.message+'" in "'+t.namespace+'"')}return this};var n=t.clone(e),r=i.component.call(i,n,a);return t.components[e]=r,r},t.background=new Kinetic.Layer,t.foreground=new Kinetic.Layer,t.stage.add(t.background),t.stage.add(t.foreground),t.bgimage=new Image,t.saveArea=new Kinetic.Rect,t.background.add(t.saveArea),t.bind("load",function(){t.saveArea.setFillPatternImage(t.bgimage),t.saveArea.setFillPatternOffset([-t.saveWidth/2,-t.saveHeight/2]),t.saveArea.setFillPatternScale(1/t.scale),t.saveArea.setFillPatternX(0),t.saveArea.setFillPatternY(0),t.saveArea.setFillPatternRepeat("repeat"),t.background.on("click",function(){t.setActiveElement(t.stage)})},t.bgimage),t.bgimage.src=CCM_REL+"/concrete/images/testbg.png",t.buildBackground=function(){var e=t.stage.getTotalDimensions();t.saveArea.setFillPatternOffset([-t.saveWidth/2*t.scale,-t.saveHeight/2*t.scale]),t.saveArea.setX(Math.round(t.center.x-t.saveWidth/2)),t.saveArea.setY(Math.round(t.center.y-t.saveHeight/2)),t.saveArea.setFillPatternScale(1/t.scale),t.saveArea.setWidth(t.saveWidth),t.saveArea.setHeight(t.saveHeight),t.coverLayer||(t.coverLayer=new Kinetic.Rect,t.coverLayer.setStroke("rgba(150,150,150,.5)"),t.coverLayer.setFill("transparent"),t.coverLayer.setListening(!1),t.coverLayer.setStrokeWidth(Math.max(e.width,e.height,500)),t.foreground.add(t.coverLayer));var a=2*Math.max(e.width,e.height);t.coverLayer.setPosition(t.saveArea.getX()-a/2,t.saveArea.getY()-a/2),t.coverLayer.setSize(t.saveArea.getWidth()+a,t.saveArea.getHeight()+a),t.coverLayer.setStrokeWidth(a),t.fire("backgroundBuilt"),t.saveArea.draw(),t.coverLayer.draw()},t.buildBackground(),t.on("stageChanged",t.buildBackground),t.stage.setDragBoundFunc(function(e){var a=t.stage.getTotalDimensions(),i=Math.max(a.max.x,a.min.x)+100,n=Math.min(a.max.x,a.min.x)-100,o=Math.max(a.max.y,a.min.y)+100,s=Math.min(a.max.y,a.min.y)-100;return e.x=Math.floor(e.x),e.y=Math.floor(e.y),e.x>i&&(e.x=i),e.x<n&&(e.x=n),e.y>o&&(e.y=o),e.y<s&&(e.y=s),e.x=Math.floor(e.x),e.y=Math.floor(e.y),e}),t.setActiveElement(t.stage),t.stage.setDraggable(!0),t.autoCrop=!0,t.on("imageLoad",function(){var e=t.stage.getWidth()-100,a=t.stage.getHeight()-100;if(!(t.saveWidth<e&&t.saveHeight<a)){var i=Math.max(t.saveWidth/e,t.saveHeight/a);t.scale=1/i,t.scale=Math.round(100*t.scale)/100,t.alterCore("scale",t.scale),t.stage.setScale(t.scale),t.stage.setX((t.stage.getWidth()-t.stage.getWidth()*t.stage.getScale().x)/2),t.stage.setY((t.stage.getHeight()-t.stage.getHeight()*t.stage.getScale().y)/2);var n=t.stage.getDragBoundFunc()({x:t.stage.getX(),y:t.stage.getY()});t.stage.setX(n.x),t.stage.setY(n.y),t.fire("scaleChange"),t.fire("stageChanged"),t.buildBackground()}}),t.fit=function(e,a){if(!1===a)return{width:t.saveWidth,height:t.saveHeight};var i=e.height,n=e.width;return n>t.saveWidth&&(i/=n/t.saveWidth,n=t.saveWidth),i>t.saveHeight&&(n/=i/t.saveHeight,i=t.saveHeight),{width:n,height:i}},e.src){t.showLoader(ccmi18n_imageeditor.loadingImage);var l=new Image,h=!1;l.crossOrigin="Anonymous",t.bind("ControlSetsLoaded",function(){h=!0}),t.bind("load",function(){function e(){_.defer(function(){t.stage.draw(),t.setActiveElement(i),t.fire("changeActiveAction",t.controlSetNamespaces[0])})}t.strictSize?0!=t.saveWidth&&0!=t.saveHeight||(0==t.saveWidth?0==t.saveHeight?(t.saveWidth=l.width,t.saveHeight=l.height,t.fire("saveSizeChange"),t.buildBackground()):(t.saveWidth=Math.floor(l.width/l.height*t.saveHeight),t.fire("saveSizeChange"),t.buildBackground()):0==t.saveHeight&&(t.saveHeight=Math.floor(l.height/l.width*t.saveWidth),t.fire("saveSizeChange"),t.buildBackground())):(t.saveWidth=l.width,t.saveHeight=l.height,t.fire("saveSizeChange"),t.buildBackground());var a={x:Math.floor(t.center.x-l.width/2),y:Math.floor(t.center.y-l.height/2)},i=new Kinetic.Image({image:l,x:0,y:0});i.setPosition(a),t.addElement(i,"image"),_.defer(function(){t.fire("imageload")}),h?e():t.bind("ControlSetsLoaded",e)},l),l.src=e.src}else t.fire("imageload");return t.bind("imageload",function(){var a,i=e.controlsets||{},o=(e.filters,0);n("Loading ControlSets"),t.showLoader(ccmi18n_imageeditor.loadingControlSets),t.fire("LoadingControlSets");for(a in i){var s="ControlSet_"+a;t.controlSetNamespaces.push(s),$.ajax(i[a].src,{dataType:"text",cache:!1,namespace:a,myns:s,beforeSend:function(){o++},success:function(e){o--;var a=t.addControlSet(this.myns,e,i[this.namespace].element);n(a),t.fire("controlSetLoad",a),0==o&&t.trigger("ControlSetsLoaded")},error:function(e,a,i){0==--o&&t.trigger("ControlSetsLoaded")}})}}),t.bind("ControlSetsLoaded",function(){t.fire("LoadingComponents"),t.showLoader(ccmi18n_imageeditor.loadingComponents);var a,i=e.components||{},o=0;n("Loading Components");for(a in i){var s="Component_"+a;$.ajax(i[a].src,{dataType:"text",cache:!1,namespace:a,myns:s,beforeSend:function(){o++},success:function(e){o--;var a=t.addComponent(this.myns,e,i[this.namespace].element);n(a),t.fire("ComponentLoad",a),0==o&&t.trigger("ComponentsLoaded")},error:function(e,a,i){0==--o&&t.trigger("ComponentsLoaded")}})}0==o&&t.trigger("ComponentsLoaded")}),t.bind("ComponentsLoaded",function(){n("Loading Filters"),t.showLoader(ccmi18n_imageeditor.loadingFilters);var a,i,o=e.filters||{},s=0;t.fire("LoadingFilters");for(a in o)o.hasOwnProperty(a)&&function(e){var a=_.clone(o[e]),n="Filter_"+e,r=a.name;i||(i=n),s++,$.ajax(o[e].src,{dataType:"text",cache:!1,namespace:e,myns:n,name:r,success:function(e){var i=t.addFilter(this.myns,e);i.name=this.name,i.settings=a,t.fire("filterLoad",i),0===--s&&t.trigger("FiltersLoaded")},error:function(e,a,i){0===--s&&t.trigger("FiltersLoaded")}})}(a)}),t.bind("ChangeActiveAction",function(e,a){if(a!==t.activeControlSet){for(var n in t.controlSets)i(t.controlSets[n]),n!==a&&i(t.controlSets[n]).slideUp();if(t.activeControlSet=a,t.alterCore("activeControlSet",a),!a)return void $("div.control-sets",t.controlContext).find("h4.active").removeClass("active");var o=$(t.controlSets[a]),s=o.show().height();0!=o.length&&o.hide().height(s).slideDown(function(){$(this).height("")})}}),t.bind("ChangeActiveComponent",function(e,a){if(a!==t.activeComponent){for(var n in t.components)n!==a&&i(t.components[n]).slideUp();if(t.activeComponent=a,t.alterCore("activeComponent",a),a){var o=$(t.components[a]),s=o.show().height();0!=o.length&&o.hide().height(s).slideDown(function(){$(this).height("")})}}}),t.bind("ChangeNavTab",function(e,a){t.trigger("ChangeActiveAction",a),t.trigger("ChangeActiveComponent",a);var n=i("div.editorcontrols");switch(a){case"add":n.children("div.control-sets").hide(),n.children("div.components").show();break;case"edit":n.children("div.components").hide(),n.children("div.control-sets").show()}}),t.bind("FiltersLoaded",function(){t.hideLoader()}),t.slideOut=$("<div/>").addClass("slideOut").css({width:0,float:"right",height:"100%","overflow-x":"hidden",right:t.controlContext.width()-1,position:"absolute",background:"white","box-shadow":"black -20px 0 20px -25px"}),t.slideOutContents=$("<div/>").appendTo(t.slideOut).width(300),t.showSlideOut=function(e,a){t.hideSlideOut(function(){t.slideOut.empty(),t.slideOutContents=e.width(300),t.slideOut.append(t.slideOutContents),t.slideOut.addClass("active").addClass("sliding"),t.slideOut.stop(1).slideOut(300,function(){t.slideOut.removeClass("sliding"),"function"==typeof a&&a()})})},t.hideSlideOut=function(e){t.slideOut.addClass("sliding"),t.slideOut.slideIn(300,function(){t.slideOut.css("border-right","0"),t.slideOut.removeClass("active").removeClass("sliding"),"function"==typeof e&&e()})},t.controlContext.after(t.slideOut),t.setActiveElement(t.stage),window.c5_image_editor=t,window.im=t,t};$.fn.ImageEditor=function(e){void 0===e&&(e={}),e.imageload=$.fn.dialog.hideLoader;var t=$(this);if(e.container=t[0],0==t.height())return void setTimeout(function(){t.ImageEditor(e)},50);t.closest(".ui-dialog").find(".ui-resizable-handle").hide(),t.height("-=30"),$("div.editorcontrols").height(t.height()-90),t.width("-=330").parent().width("-=330").children("div.bottomBar").width("-=330"),void 0===e.width&&(e.width=t.width()),void 0===e.height&&(e.height=t.height()),$.fn.dialog.showLoader();var a=new ImageEditor(e),i=a.domContext;return $("div.control-sets > div.controlset",i).each(function(){var e=$(this),t=e.data("namespace");e.find("h4").click(function(){e.hasClass("active")||a.fire("ChangeActiveAction","ControlSet_"+t)}),a.bind("ChangeActiveAction",function(a,n){if(n==="ControlSet_"+t){i.find("div.controlset.active").removeClass("active").children(".control").slideUp(250),e.addClass("active");e.children(".control").height("auto").slideDown(250)}})}),$("div.controls > div.controlscontainer",i).children("div.save").children("button.save").click(function(){$(this).attr("disabled",!0),a.save()}).end().children("button.cancel").click(function(){confirm(ccmi18n_imageeditor.areYouSure)&&$.fn.dialog.closeTop()}),a.on("ChangeActiveAction",function(e,t){t||$("h4.active",i).removeClass("active")}),a.on("ChangeActiveComponent",function(e,t){t||$("div.controlset.active",i).removeClass("active")}),a.bind("imageload",$.fn.dialog.hideLoader),a},$.fn.slideOut=function(e,t){var a=$(this),i=a.width();return a.css("overflow-y","auto"),255==i?(a.animate({width:255},0,t),this):(a.width(i).animate({width:255},e||300,t||function(){}),this)},$.fn.slideIn=function(e,t){var a=$(this);return a.css("overflow-y","hidden"),0===a.width()?(a.animate({width:0},0,t),this):(a.animate({width:0},e||300,t||function(){}),this)},ImageEditor.prototype=ImageEditor.fn={filter:{grayscale:Kinetic.Filters.Grayscale,sepia:function(e){var t,a=e.data;for(t=0;t<a.length;t+=4)a[t]=.393*a[t]+.769*a[t+1]+.189*a[t+2],a[t+1]=.349*a[t]+.686*a[t+1]+.168*a[t+2],a[t+2]=.272*a[t]+.534*a[t+1]+.131*a[t+2]},brightness:function(e,t){for(var a=t.level,i=e.data,n=0;n<i.length;n+=4)i[n]+=a,i[n+1]+=a,i[n+2]+=a},invert:function(e,t){for(var a=e.data,i=0;i<a.length;i+=4)a[i]=255-a[i],a[i+1]=255-a[i+1],a[i+2]=255-a[i+2]},restore:function(e,t){for(var a=(t.level,e.data),i=t.imageData.data,n=0;n<a.length;n+=4)a[n]=i[n],a[n+1]=i[n+1],a[n+2]=i[n+2]}}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,